- name: Set destination server
  set_fact:
    backup_hostname: "{{ hostvars[groups['backups'][0]].ansible_host }}"
    backup_port: "{{ hostvars[groups['backups'][0]].ansible_port | default('22') }}"
  tags:
    - backups
  when: "'backups' in groups and groups['backups'] | length == 1"

- name: Copy backups.sh file to backup_server_user's home directory
  copy:
    src: ../backups/backup.sh
    dest: '{{ crontab_user_home }}/backup.sh'
    owner: 'root'
    mode: 0755

- name: 'Setup crontab to backup the opencrvs data'
  when: enable_backups | default(false)
  cron:
    user: '{{ crontab_user }}'
    name: 'backup opencrvs'
    minute: '0'
    hour: '0'
    job: 'bash {{ crontab_user_home }}/backup.sh --passphrase={{ backup_encryption_passphrase }} --ssh_user={{ backup_server_user }} --ssh_host={{ backup_hostname }} --ssh_port={{ backup_port }} --remote_dir={{ backup_server_remote_target_directory }} --replicas=1 >> /var/log/opencrvs-backup.log 2>&1'
    state: "{{ 'present' if (backup_hostname is defined and backup_encryption_passphrase and (enable_backups | default(false))) else 'absent' }}"

##
# For machines that periodically restore from backup (staging)
##

- name: Set default value for periodic_restore_from_backup
  set_fact:
    periodic_restore_from_backup: false
  when: periodic_restore_from_backup is not defined

- name: Throw an error if periodic_restore_from_backup is true but backup_restore_encryption_passphrase is not defined
  fail:
    msg: "Error: backup_restore_encryption_passphrase is not defined. This usually means you have enabled periodic restore from production but you haven't set up a production environment yet. Please set up a production environment first."
  when: periodic_restore_from_backup and backup_restore_encryption_passphrase is not defined

- name: 'Setup crontab to download a backup periodically the opencrvs data'
  when: periodic_restore_from_backup
  cron:
    user: '{{ crontab_user }}'
    name: 'download opencrvs backup'
    minute: '30'
    hour: '0'
    job: 'cd / && bash /opt/opencrvs/infrastructure/backups/download.sh --passphrase={{ backup_restore_encryption_passphrase }} --ssh_user={{ backup_server_user }} --ssh_host={{ backup_hostname }} --ssh_port={{ backup_port }} --remote_dir={{ backup_server_remote_source_directory }} >> /var/log/opencrvs-restore.log 2>&1'
    state: "{{ 'present' if (backup_hostname is defined and backup_restore_encryption_passphrase and periodic_restore_from_backup) else 'absent' }}"

- name: 'Setup crontab to restore the opencrvs data'
  when: periodic_restore_from_backup
  cron:
    user: '{{ crontab_user }}'
    name: 'restore opencrvs'
    minute: '0'
    hour: '1'
    job: 'cd / && bash /opt/opencrvs/infrastructure/backups/restore.sh --replicas=1 >> /var/log/opencrvs-restore.log 2>&1'
    state: "{{ 'present' if (backup_hostname is defined and backup_restore_encryption_passphrase and periodic_restore_from_backup) else 'absent' }}"
